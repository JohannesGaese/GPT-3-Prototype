{"ast":null,"code":"import fs from 'fs';\nimport Stream from 'stream';\nimport unzip from 'unzipper';\n/**\r\n * Reads XLSX file in Node.js.\r\n * @param  {(string|Stream)} input - A Node.js readable stream or a path to a file.\r\n * @return {Promise} Resolves to an object holding XLSX file entries.\r\n */\n\nexport default function unpackXlsxFile(input) {\n  // XLSX file is a zip archive.\n  // The `entries` object stores the files\n  // and their contents from this XLSX zip archive.\n  var entries = {};\n  var stream = input instanceof Stream ? input : fs.createReadStream(input);\n  return new Promise(function (resolve, reject) {\n    var entryPromises = [];\n    stream // This first \"error\" listener is for the original stream errors.\n    .on('error', reject).pipe(unzip.Parse()) // This second \"error\" listener is for the unzip stream errors.\n    .on('error', reject).on('close', function () {\n      return Promise.all(entryPromises).then(function () {\n        return resolve(entries);\n      });\n    }).on('entry', function (entry) {\n      var contents = ''; // To ignore an entry: `entry.autodrain()`.\n\n      entryPromises.push(new Promise(function (resolve) {\n        entry.on('data', function (data) {\n          return contents += data.toString();\n        }).on('end', function () {\n          return resolve(entries[entry.path] = contents);\n        });\n      }));\n    });\n  });\n}","map":{"version":3,"sources":["../source/unpackXlsxFileNode.js"],"names":["entries","stream","input","fs","entryPromises","unzip","resolve","contents","entry","data"],"mappings":"AAAA,OAAA,EAAA,MAAA,IAAA;AACA,OAAA,MAAA,MAAA,QAAA;AACA,OAAA,KAAA,MAAA,UAAA;AAEA;;;;;;AAKA,eAAe,SAAA,cAAA,CAAA,KAAA,EAA+B;AAC5C;AACA;AACA;AACA,MAAMA,OAAAA,GAAN,EAAA;AAEA,MAAMC,MAAAA,GAASC,KAAAA,YAAAA,MAAAA,GAAAA,KAAAA,GAAkCC,EAAAA,CAAAA,gBAAAA,CAAjD,KAAiDA,CAAjD;AAEA,SAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AACtC,QAAMC,aAAAA,GAAN,EAAA;AAEAH,IAAAA,MAAAA,CACE;AADFA,KAAAA,EAAAA,CAAAA,OAAAA,EAAAA,MAAAA,EAAAA,IAAAA,CAGQI,KAAAA,CAHRJ,KAGQI,EAHRJ,EAIE;AAJFA,KAAAA,EAAAA,CAAAA,OAAAA,EAAAA,MAAAA,EAAAA,EAAAA,CAAAA,OAAAA,EAMe,YAAA;AAAA,aAAO,OAAA,CAAA,GAAA,CAAA,aAAA,EAAA,IAAA,CAAgC,YAAA;AAAA,eAAMK,OAAAA,CAAN,OAAMA,CAAN;AAAvC,OAAO,CAAP;AANfL,KAAAA,EAAAA,EAAAA,CAAAA,OAAAA,EAOe,UAAA,KAAA,EAAW;AACtB,UAAIM,QAAAA,GAAJ,EAAA,CADsB,CAEtB;;AACAH,MAAAA,aAAAA,CAAAA,IAAAA,CAAmB,IAAA,OAAA,CAAY,UAAA,OAAA,EAAa;AAC1CI,QAAAA,KAAAA,CAAAA,EAAAA,CAAAA,MAAAA,EACc,UAAA,IAAA,EAAA;AAAA,iBAAQD,QAAAA,IAAYE,IAAAA,CAApB,QAAoBA,EAApB;AADdD,SAAAA,EAAAA,EAAAA,CAAAA,KAAAA,EAEa,YAAA;AAAA,iBAAMF,OAAAA,CAAQN,OAAAA,CAAQQ,KAAAA,CAARR,IAAAA,CAAAA,GAAd,QAAMM,CAAN;AAFbE,SAAAA;AADFJ,OAAmB,CAAnBA;AAVJH,KAAAA;AAHF,GAAO,CAAP;AAoBD","sourcesContent":["import fs from 'fs'\r\nimport Stream from 'stream'\r\nimport unzip from 'unzipper'\r\n\r\n/**\r\n * Reads XLSX file in Node.js.\r\n * @param  {(string|Stream)} input - A Node.js readable stream or a path to a file.\r\n * @return {Promise} Resolves to an object holding XLSX file entries.\r\n */\r\nexport default function unpackXlsxFile(input) {\r\n  // XLSX file is a zip archive.\r\n  // The `entries` object stores the files\r\n  // and their contents from this XLSX zip archive.\r\n  const entries = {}\r\n\r\n  const stream = input instanceof Stream ? input : fs.createReadStream(input)\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const entryPromises = []\r\n\r\n    stream\r\n      // This first \"error\" listener is for the original stream errors.\r\n      .on('error', reject)\r\n      .pipe(unzip.Parse())\r\n      // This second \"error\" listener is for the unzip stream errors.\r\n      .on('error', reject)\r\n      .on('close', () =>  Promise.all(entryPromises).then(() => resolve(entries)))\r\n      .on('entry', (entry) => {\r\n        let contents = ''\r\n        // To ignore an entry: `entry.autodrain()`.\r\n        entryPromises.push(new Promise((resolve) => {\r\n          entry\r\n            .on('data', data => contents += data.toString())\r\n            .on('end', () => resolve(entries[entry.path] = contents))\r\n        }))\r\n      })\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}