{"ast":null,"code":"const request = require(\"request\");\n\nmodule.exports = function (headers, {\n  engine = \"davinci\",\n  prompt,\n  temperature = 1,\n  max_tokens = 64,\n  top_p = 1,\n  frequency_penalty = 0,\n  presence_penalty = 1,\n  n = 1,\n  stream = false,\n  logprobs = null,\n  echo = false,\n  best_of = 1,\n  stop = null\n} = {}) {\n  if (!headers.api_key) throw new Error(\"Missing API Key. openai.api_key = YOUR_API_KEY\");\n  return new Promise((resolve, reject) => {\n    var options = {\n      method: \"POST\",\n      url: `https://api.openai.com/v1/engines/${engine}/completions`,\n      headers: headers.getHeaders(),\n      body: JSON.stringify({\n        prompt: prompt,\n        temperature: temperature,\n        max_tokens: max_tokens,\n        top_p: top_p,\n        frequency_penalty: frequency_penalty,\n        presence_penalty: presence_penalty,\n        n: n,\n        best_of: best_of,\n        stop: stop,\n        echo: echo,\n        stream: stream,\n        logprobs: logprobs\n      })\n    };\n    request(options, function (error, response) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(JSON.parse(response.body));\n      }\n    });\n  });\n};","map":{"version":3,"sources":["C:/GPT-3/GPT-3-Prototype/node_modules/openai-node/methods/CompletionCreate.js"],"names":["request","require","module","exports","headers","engine","prompt","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","n","stream","logprobs","echo","best_of","stop","api_key","Error","Promise","resolve","reject","options","method","url","getHeaders","body","JSON","stringify","error","response","parse"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UACbC,OADa,EAEb;AACIC,EAAAA,MAAM,GAAG,SADb;AAEIC,EAAAA,MAFJ;AAGIC,EAAAA,WAAW,GAAG,CAHlB;AAIIC,EAAAA,UAAU,GAAG,EAJjB;AAKIC,EAAAA,KAAK,GAAG,CALZ;AAMIC,EAAAA,iBAAiB,GAAG,CANxB;AAOIC,EAAAA,gBAAgB,GAAG,CAPvB;AAQIC,EAAAA,CAAC,GAAG,CARR;AASIC,EAAAA,MAAM,GAAG,KATb;AAUIC,EAAAA,QAAQ,GAAG,IAVf;AAWIC,EAAAA,IAAI,GAAG,KAXX;AAYIC,EAAAA,OAAO,GAAG,CAZd;AAaIC,EAAAA,IAAI,GAAG;AAbX,IAcI,EAhBS,EAiBf;AACE,MAAI,CAACb,OAAO,CAACc,OAAb,EAAsB,MAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AACtB,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAIC,OAAO,GAAG;AACVC,MAAAA,MAAM,EAAE,MADE;AAEVC,MAAAA,GAAG,EAAG,qCAAoCpB,MAAO,cAFvC;AAGVD,MAAAA,OAAO,EAAEA,OAAO,CAACsB,UAAR,EAHC;AAIVC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBvB,QAAAA,MAAM,EAAEA,MADS;AAEjBC,QAAAA,WAAW,EAAEA,WAFI;AAGjBC,QAAAA,UAAU,EAAEA,UAHK;AAIjBC,QAAAA,KAAK,EAAEA,KAJU;AAKjBC,QAAAA,iBAAiB,EAAEA,iBALF;AAMjBC,QAAAA,gBAAgB,EAAEA,gBAND;AAOjBC,QAAAA,CAAC,EAAEA,CAPc;AAQjBI,QAAAA,OAAO,EAAEA,OARQ;AASjBC,QAAAA,IAAI,EAAEA,IATW;AAUjBF,QAAAA,IAAI,EAAEA,IAVW;AAWjBF,QAAAA,MAAM,EAAEA,MAXS;AAYjBC,QAAAA,QAAQ,EAAEA;AAZO,OAAf;AAJI,KAAd;AAmBAd,IAAAA,OAAO,CAACuB,OAAD,EAAU,UAAUO,KAAV,EAAiBC,QAAjB,EAA2B;AACxC,UAAID,KAAJ,EAAW;AACPR,QAAAA,MAAM,CAACQ,KAAD,CAAN;AACH,OAFD,MAEO;AACHT,QAAAA,OAAO,CAACO,IAAI,CAACI,KAAL,CAAWD,QAAQ,CAACJ,IAApB,CAAD,CAAP;AACH;AACJ,KANM,CAAP;AAOH,GA3BM,CAAP;AA4BH,CA/CD","sourcesContent":["const request = require(\"request\");\r\n\r\nmodule.exports = function (\r\n    headers,\r\n    {\r\n        engine = \"davinci\",\r\n        prompt,\r\n        temperature = 1,\r\n        max_tokens = 64,\r\n        top_p = 1,\r\n        frequency_penalty = 0,\r\n        presence_penalty = 1,\r\n        n = 1,\r\n        stream = false,\r\n        logprobs = null,\r\n        echo = false,\r\n        best_of = 1,\r\n        stop = null,\r\n    } = {}\r\n) {\r\n    if (!headers.api_key) throw new Error(\"Missing API Key. openai.api_key = YOUR_API_KEY\");\r\n    return new Promise((resolve, reject) => {\r\n        var options = {\r\n            method: \"POST\",\r\n            url: `https://api.openai.com/v1/engines/${engine}/completions`,\r\n            headers: headers.getHeaders(),\r\n            body: JSON.stringify({\r\n                prompt: prompt,\r\n                temperature: temperature,\r\n                max_tokens: max_tokens,\r\n                top_p: top_p,\r\n                frequency_penalty: frequency_penalty,\r\n                presence_penalty: presence_penalty,\r\n                n: n,\r\n                best_of: best_of,\r\n                stop: stop,\r\n                echo: echo,\r\n                stream: stream,\r\n                logprobs: logprobs,\r\n            }),\r\n        };\r\n        request(options, function (error, response) {\r\n            if (error) {\r\n                reject(error);\r\n            } else {\r\n                resolve(JSON.parse(response.body));\r\n            }\r\n        });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"script"}