{"ast":null,"code":"const request = require(\"request\");\n\nmodule.exports = function (headers, {\n  model = \"curie\",\n  query,\n  examples,\n  file,\n  labels,\n  search_model,\n  temperature,\n  logprops,\n  max_examples,\n  return_prompt,\n  return_metadata,\n  expand\n} = {}) {\n  if (examples.length === 0 && !file) throw new Error(\"Must have examples or file\");\n  if (!query) throw new Error(\"Missing query\");\n  if (!headers.api_key) throw new Error(\"Missing API Key. openai.api_key = YOUR_API_KEY\");\n  return new Promise((resolve, reject) => {\n    var options = {\n      method: \"POST\",\n      url: `https://api.openai.com/v1/classifications`,\n      headers: headers.getHeaders(),\n      body: JSON.stringify({\n        model: model,\n        query: query,\n        examples: examples,\n        file: file,\n        labels: labels,\n        search_model: search_model,\n        temperature: temperature,\n        logprops: logprops,\n        max_examples: max_examples,\n        return_prompt: return_prompt,\n        return_metadata: return_metadata,\n        expand: expand\n      })\n    };\n    request(options, function (error, response) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(JSON.parse(response.body));\n      }\n    });\n  });\n};","map":{"version":3,"sources":["C:/GPT-3/GPT-3-Prototype/node_modules/openai-node/methods/ClassificationCreate.js"],"names":["request","require","module","exports","headers","model","query","examples","file","labels","search_model","temperature","logprops","max_examples","return_prompt","return_metadata","expand","length","Error","api_key","Promise","resolve","reject","options","method","url","getHeaders","body","JSON","stringify","error","response","parse"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UACbC,OADa,EAEb;AAAEC,EAAAA,KAAK,GAAG,OAAV;AAAmBC,EAAAA,KAAnB;AAA0BC,EAAAA,QAA1B;AAAoCC,EAAAA,IAApC;AAA0CC,EAAAA,MAA1C;AAAkDC,EAAAA,YAAlD;AAAgEC,EAAAA,WAAhE;AAA6EC,EAAAA,QAA7E;AAAuFC,EAAAA,YAAvF;AAAqGC,EAAAA,aAArG;AAAoHC,EAAAA,eAApH;AAAqIC,EAAAA;AAArI,IAAgJ,EAFnI,EAGf;AACE,MAAIT,QAAQ,CAACU,MAAT,KAAoB,CAApB,IAAyB,CAACT,IAA9B,EAAoC,MAAM,IAAIU,KAAJ,CAAU,4BAAV,CAAN;AACpC,MAAI,CAACZ,KAAL,EAAY,MAAM,IAAIY,KAAJ,CAAU,eAAV,CAAN;AACZ,MAAI,CAACd,OAAO,CAACe,OAAb,EAAsB,MAAM,IAAID,KAAJ,CAAU,gDAAV,CAAN;AACtB,SAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAIC,OAAO,GAAG;AACVC,MAAAA,MAAM,EAAE,MADE;AAEVC,MAAAA,GAAG,EAAG,2CAFI;AAGVrB,MAAAA,OAAO,EAAEA,OAAO,CAACsB,UAAR,EAHC;AAKVC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBxB,QAAAA,KAAK,EAAEA,KADU;AAEjBC,QAAAA,KAAK,EAAEA,KAFU;AAGjBC,QAAAA,QAAQ,EAAEA,QAHO;AAIjBC,QAAAA,IAAI,EAAEA,IAJW;AAKjBC,QAAAA,MAAM,EAAEA,MALS;AAMjBC,QAAAA,YAAY,EAAEA,YANG;AAOjBC,QAAAA,WAAW,EAAEA,WAPI;AAQjBC,QAAAA,QAAQ,EAAEA,QARO;AASjBC,QAAAA,YAAY,EAAEA,YATG;AAUjBC,QAAAA,aAAa,EAAEA,aAVE;AAWjBC,QAAAA,eAAe,EAAEA,eAXA;AAYjBC,QAAAA,MAAM,EAAEA;AAZS,OAAf;AALI,KAAd;AAoBAhB,IAAAA,OAAO,CAACuB,OAAD,EAAU,UAAUO,KAAV,EAAiBC,QAAjB,EAA2B;AACxC,UAAID,KAAJ,EAAW;AACPR,QAAAA,MAAM,CAACQ,KAAD,CAAN;AACH,OAFD,MAEO;AACHT,QAAAA,OAAO,CAACO,IAAI,CAACI,KAAL,CAAWD,QAAQ,CAACJ,IAApB,CAAD,CAAP;AACH;AACJ,KANM,CAAP;AAOH,GA5BM,CAAP;AA6BH,CApCD","sourcesContent":["const request = require(\"request\");\r\n\r\nmodule.exports = function (\r\n    headers,\r\n    { model = \"curie\", query, examples, file, labels, search_model, temperature, logprops, max_examples, return_prompt, return_metadata, expand } = {}\r\n) {\r\n    if (examples.length === 0 && !file) throw new Error(\"Must have examples or file\");\r\n    if (!query) throw new Error(\"Missing query\");\r\n    if (!headers.api_key) throw new Error(\"Missing API Key. openai.api_key = YOUR_API_KEY\");\r\n    return new Promise((resolve, reject) => {\r\n        var options = {\r\n            method: \"POST\",\r\n            url: `https://api.openai.com/v1/classifications`,\r\n            headers: headers.getHeaders(),\r\n\r\n            body: JSON.stringify({\r\n                model: model,\r\n                query: query,\r\n                examples: examples,\r\n                file: file,\r\n                labels: labels,\r\n                search_model: search_model,\r\n                temperature: temperature,\r\n                logprops: logprops,\r\n                max_examples: max_examples,\r\n                return_prompt: return_prompt,\r\n                return_metadata: return_metadata,\r\n                expand: expand,\r\n            }),\r\n        };\r\n        request(options, function (error, response) {\r\n            if (error) {\r\n                reject(error);\r\n            } else {\r\n                resolve(JSON.parse(response.body));\r\n            }\r\n        });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"script"}