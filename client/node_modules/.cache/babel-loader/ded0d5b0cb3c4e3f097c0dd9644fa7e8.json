{"ast":null,"code":"const request = require(\"request\");\n\nmodule.exports = function (headers, {\n  documents = [],\n  file,\n  query = null,\n  engine = \"davinci\",\n  max_rerank,\n  return_metadata\n} = {}) {\n  if (documents.length === 0 && !file) throw new Error(\"Documents can't be empty and have no file\");\n  if (!query) throw new Error(\"Missing query\");\n  if (!headers.api_key) throw new Error(\"Missing API Key. openai.api_key = YOUR_API_KEY\");\n  return new Promise((resolve, reject) => {\n    var options = {\n      method: \"POST\",\n      url: `https://api.openai.com/v1/engines/${engine}/search`,\n      headers: headers.getHeaders(),\n      body: JSON.stringify({\n        documents: documents,\n        file: file,\n        max_rerank: max_rerank,\n        return_metadata: return_metadata,\n        query: query\n      })\n    };\n    request(options, function (error, response) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(JSON.parse(response.body));\n      }\n    });\n  });\n};","map":{"version":3,"sources":["C:/GPT-3/GPT-3-Prototype/node_modules/openai-node/methods/Search.js"],"names":["request","require","module","exports","headers","documents","file","query","engine","max_rerank","return_metadata","length","Error","api_key","Promise","resolve","reject","options","method","url","getHeaders","body","JSON","stringify","error","response","parse"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmB;AAAEC,EAAAA,SAAS,GAAG,EAAd;AAAkBC,EAAAA,IAAlB;AAAwBC,EAAAA,KAAK,GAAG,IAAhC;AAAsCC,EAAAA,MAAM,GAAG,SAA/C;AAA0DC,EAAAA,UAA1D;AAAsEC,EAAAA;AAAtE,IAA0F,EAA7G,EAAiH;AAC9H,MAAIL,SAAS,CAACM,MAAV,KAAqB,CAArB,IAA0B,CAACL,IAA/B,EAAqC,MAAM,IAAIM,KAAJ,CAAU,2CAAV,CAAN;AACrC,MAAI,CAACL,KAAL,EAAY,MAAM,IAAIK,KAAJ,CAAU,eAAV,CAAN;AACZ,MAAI,CAACR,OAAO,CAACS,OAAb,EAAsB,MAAM,IAAID,KAAJ,CAAU,gDAAV,CAAN;AACtB,SAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAIC,OAAO,GAAG;AACVC,MAAAA,MAAM,EAAE,MADE;AAEVC,MAAAA,GAAG,EAAG,qCAAoCX,MAAO,SAFvC;AAGVJ,MAAAA,OAAO,EAAEA,OAAO,CAACgB,UAAR,EAHC;AAKVC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBlB,QAAAA,SAAS,EAAEA,SADM;AAEjBC,QAAAA,IAAI,EAAEA,IAFW;AAGjBG,QAAAA,UAAU,EAAEA,UAHK;AAIjBC,QAAAA,eAAe,EAAEA,eAJA;AAKjBH,QAAAA,KAAK,EAAEA;AALU,OAAf;AALI,KAAd;AAaAP,IAAAA,OAAO,CAACiB,OAAD,EAAU,UAAUO,KAAV,EAAiBC,QAAjB,EAA2B;AACxC,UAAID,KAAJ,EAAW;AACPR,QAAAA,MAAM,CAACQ,KAAD,CAAN;AACH,OAFD,MAEO;AACHT,QAAAA,OAAO,CAACO,IAAI,CAACI,KAAL,CAAWD,QAAQ,CAACJ,IAApB,CAAD,CAAP;AACH;AACJ,KANM,CAAP;AAOH,GArBM,CAAP;AAsBH,CA1BD","sourcesContent":["const request = require(\"request\");\r\nmodule.exports = function (headers, { documents = [], file, query = null, engine = \"davinci\", max_rerank, return_metadata } = {}) {\r\n    if (documents.length === 0 && !file) throw new Error(\"Documents can't be empty and have no file\");\r\n    if (!query) throw new Error(\"Missing query\");\r\n    if (!headers.api_key) throw new Error(\"Missing API Key. openai.api_key = YOUR_API_KEY\");\r\n    return new Promise((resolve, reject) => {\r\n        var options = {\r\n            method: \"POST\",\r\n            url: `https://api.openai.com/v1/engines/${engine}/search`,\r\n            headers: headers.getHeaders(),\r\n\r\n            body: JSON.stringify({\r\n                documents: documents,\r\n                file: file,\r\n                max_rerank: max_rerank,\r\n                return_metadata: return_metadata,\r\n                query: query,\r\n            }),\r\n        };\r\n        request(options, function (error, response) {\r\n            if (error) {\r\n                reject(error);\r\n            } else {\r\n                resolve(JSON.parse(response.body));\r\n            }\r\n        });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"script"}