{"ast":null,"code":"const request = require(\"request\");\n\nmodule.exports = function (headers, {\n  model = \"curie\",\n  question,\n  examples,\n  examples_context,\n  documents,\n  file,\n  search_model,\n  max_rerank,\n  temperature,\n  logprops,\n  max_tokens,\n  stop,\n  n,\n  return_metadata,\n  return_prompt,\n  expand\n} = {}) {\n  if (!question) throw new Error(\"Missing query\");\n  if (examples.length === 0 || !examples) throw new Error(\"Must have examples or file\");\n  if (!examples_context.length) throw new Error(\"Must have examples_context\");\n  if (documents.length === 0 && !file) throw new Error(\"Must have documents or file\");\n  if (!headers.api_key) throw new Error(\"Missing API Key. openai.api_key = YOUR_API_KEY\");\n  return new Promise((resolve, reject) => {\n    var options = {\n      method: \"POST\",\n      url: `https://api.openai.com/v1/answers`,\n      headers: headers.getHeaders(),\n      body: JSON.stringify({\n        model: model,\n        question: question,\n        examples: examples,\n        examples_context: examples_context,\n        documents: documents,\n        file: file,\n        search_model: search_model,\n        max_rerank: max_rerank,\n        temperature: temperature,\n        logprops: logprops,\n        max_tokens: max_tokens,\n        stop: stop,\n        n: n,\n        return_metadata: return_metadata,\n        return_prompt: return_prompt,\n        expand: expand\n      })\n    };\n    request(options, function (error, response) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(JSON.parse(response.body));\n      }\n    });\n  });\n};","map":{"version":3,"sources":["C:/GPT-3/GPT-3-Prototype/node_modules/openai-node/methods/AnswerCreate.js"],"names":["request","require","module","exports","headers","model","question","examples","examples_context","documents","file","search_model","max_rerank","temperature","logprops","max_tokens","stop","n","return_metadata","return_prompt","expand","Error","length","api_key","Promise","resolve","reject","options","method","url","getHeaders","body","JSON","stringify","error","response","parse"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UACbC,OADa,EAEb;AACIC,EAAAA,KAAK,GAAG,OADZ;AAEIC,EAAAA,QAFJ;AAGIC,EAAAA,QAHJ;AAIIC,EAAAA,gBAJJ;AAKIC,EAAAA,SALJ;AAMIC,EAAAA,IANJ;AAOIC,EAAAA,YAPJ;AAQIC,EAAAA,UARJ;AASIC,EAAAA,WATJ;AAUIC,EAAAA,QAVJ;AAWIC,EAAAA,UAXJ;AAYIC,EAAAA,IAZJ;AAaIC,EAAAA,CAbJ;AAcIC,EAAAA,eAdJ;AAeIC,EAAAA,aAfJ;AAgBIC,EAAAA;AAhBJ,IAiBI,EAnBS,EAoBf;AACE,MAAI,CAACd,QAAL,EAAe,MAAM,IAAIe,KAAJ,CAAU,eAAV,CAAN;AACf,MAAId,QAAQ,CAACe,MAAT,KAAoB,CAApB,IAAyB,CAACf,QAA9B,EAAwC,MAAM,IAAIc,KAAJ,CAAU,4BAAV,CAAN;AACxC,MAAI,CAACb,gBAAgB,CAACc,MAAtB,EAA8B,MAAM,IAAID,KAAJ,CAAU,4BAAV,CAAN;AAC9B,MAAIZ,SAAS,CAACa,MAAV,KAAqB,CAArB,IAA0B,CAACZ,IAA/B,EAAqC,MAAM,IAAIW,KAAJ,CAAU,6BAAV,CAAN;AACrC,MAAI,CAACjB,OAAO,CAACmB,OAAb,EAAsB,MAAM,IAAIF,KAAJ,CAAU,gDAAV,CAAN;AACtB,SAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAIC,OAAO,GAAG;AACVC,MAAAA,MAAM,EAAE,MADE;AAEVC,MAAAA,GAAG,EAAG,mCAFI;AAGVzB,MAAAA,OAAO,EAAEA,OAAO,CAAC0B,UAAR,EAHC;AAKVC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjB5B,QAAAA,KAAK,EAAEA,KADU;AAEjBC,QAAAA,QAAQ,EAAEA,QAFO;AAGjBC,QAAAA,QAAQ,EAAEA,QAHO;AAIjBC,QAAAA,gBAAgB,EAAEA,gBAJD;AAKjBC,QAAAA,SAAS,EAAEA,SALM;AAMjBC,QAAAA,IAAI,EAAEA,IANW;AAOjBC,QAAAA,YAAY,EAAEA,YAPG;AAQjBC,QAAAA,UAAU,EAAEA,UARK;AASjBC,QAAAA,WAAW,EAAEA,WATI;AAUjBC,QAAAA,QAAQ,EAAEA,QAVO;AAWjBC,QAAAA,UAAU,EAAEA,UAXK;AAYjBC,QAAAA,IAAI,EAAEA,IAZW;AAajBC,QAAAA,CAAC,EAAEA,CAbc;AAcjBC,QAAAA,eAAe,EAAEA,eAdA;AAejBC,QAAAA,aAAa,EAAEA,aAfE;AAgBjBC,QAAAA,MAAM,EAAEA;AAhBS,OAAf;AALI,KAAd;AAwBApB,IAAAA,OAAO,CAAC2B,OAAD,EAAU,UAAUO,KAAV,EAAiBC,QAAjB,EAA2B;AACxC,UAAID,KAAJ,EAAW;AACPR,QAAAA,MAAM,CAACQ,KAAD,CAAN;AACH,OAFD,MAEO;AACHT,QAAAA,OAAO,CAACO,IAAI,CAACI,KAAL,CAAWD,QAAQ,CAACJ,IAApB,CAAD,CAAP;AACH;AACJ,KANM,CAAP;AAOH,GAhCM,CAAP;AAiCH,CA3DD","sourcesContent":["const request = require(\"request\");\r\n\r\nmodule.exports = function (\r\n    headers,\r\n    {\r\n        model = \"curie\",\r\n        question,\r\n        examples,\r\n        examples_context,\r\n        documents,\r\n        file,\r\n        search_model,\r\n        max_rerank,\r\n        temperature,\r\n        logprops,\r\n        max_tokens,\r\n        stop,\r\n        n,\r\n        return_metadata,\r\n        return_prompt,\r\n        expand,\r\n    } = {}\r\n) {\r\n    if (!question) throw new Error(\"Missing query\");\r\n    if (examples.length === 0 || !examples) throw new Error(\"Must have examples or file\");\r\n    if (!examples_context.length) throw new Error(\"Must have examples_context\");\r\n    if (documents.length === 0 && !file) throw new Error(\"Must have documents or file\");\r\n    if (!headers.api_key) throw new Error(\"Missing API Key. openai.api_key = YOUR_API_KEY\");\r\n    return new Promise((resolve, reject) => {\r\n        var options = {\r\n            method: \"POST\",\r\n            url: `https://api.openai.com/v1/answers`,\r\n            headers: headers.getHeaders(),\r\n\r\n            body: JSON.stringify({\r\n                model: model,\r\n                question: question,\r\n                examples: examples,\r\n                examples_context: examples_context,\r\n                documents: documents,\r\n                file: file,\r\n                search_model: search_model,\r\n                max_rerank: max_rerank,\r\n                temperature: temperature,\r\n                logprops: logprops,\r\n                max_tokens: max_tokens,\r\n                stop: stop,\r\n                n: n,\r\n                return_metadata: return_metadata,\r\n                return_prompt: return_prompt,\r\n                expand: expand,\r\n            }),\r\n        };\r\n        request(options, function (error, response) {\r\n            if (error) {\r\n                reject(error);\r\n            } else {\r\n                resolve(JSON.parse(response.body));\r\n            }\r\n        });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"script"}