{"ast":null,"code":"import unpackXlsxFile from './unpackXlsxFileNode';\nimport xml from './xmlNode';\nimport readXlsxFileContents from './readXlsxFileContents';\n/**\r\n * Reads XLSX file into a 2D array of cells in a browser.\r\n * @param  {(string|Stream|Buffer)} input - A Node.js readable stream or a `Buffer` or a path to a file.\r\n * @param  {object?} options\r\n * @param  {(number|string)?} options.sheet - Excel document sheet to read. Defaults to `1`. Will only read this sheet and skip others.\r\n * @return {Promise} Resolves to a 2D array of cells: an array of rows, each row being an array of cells.\r\n */\n\nexport default function readXlsxFile(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return unpackXlsxFile(input).then(function (entries) {\n    return readXlsxFileContents(entries, xml, options);\n  });\n}","map":{"version":3,"sources":["../source/readXlsxFileNode.js"],"names":["options","readXlsxFileContents"],"mappings":"AAAA,OAAA,cAAA,MAAA,sBAAA;AACA,OAAA,GAAA,MAAA,WAAA;AACA,OAAA,oBAAA,MAAA,wBAAA;AAEA;;;;;;;;AAOA,eAAe,SAAA,YAAA,CAAA,KAAA,EAA2C;AAAA,MAAdA,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AACzD,SAAO,cAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CACA,UAAA,OAAA,EAAA;AAAA,WAAaC,oBAAAA,CAAAA,OAAAA,EAAAA,GAAAA,EAAb,OAAaA,CAAb;AADP,GAAO,CAAP;AAEA","sourcesContent":["import unpackXlsxFile from './unpackXlsxFileNode'\r\nimport xml from './xmlNode'\r\nimport readXlsxFileContents from './readXlsxFileContents'\r\n\r\n/**\r\n * Reads XLSX file into a 2D array of cells in a browser.\r\n * @param  {(string|Stream|Buffer)} input - A Node.js readable stream or a `Buffer` or a path to a file.\r\n * @param  {object?} options\r\n * @param  {(number|string)?} options.sheet - Excel document sheet to read. Defaults to `1`. Will only read this sheet and skip others.\r\n * @return {Promise} Resolves to a 2D array of cells: an array of rows, each row being an array of cells.\r\n */\r\nexport default function readXlsxFile(input, options = {}) {\r\n\treturn unpackXlsxFile(input)\r\n\t\t.then((entries) => readXlsxFileContents(entries, xml, options))\r\n}"]},"metadata":{},"sourceType":"module"}